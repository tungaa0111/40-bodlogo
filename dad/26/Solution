import java.util.*;

public class Solution {

    public static int minimumMoves(List<String> grid, int startX, int startY, int goalX, int goalY) {
        int n = grid.size();
        boolean[][] visited = new boolean[n][n];
        Queue<int[]> queue = new LinkedList<>();

        // BFS start
        queue.add(new int[]{startX, startY, 0});
        visited[startX][startY] = true;

        while (!queue.isEmpty()) {
            int[] current = queue.poll();
            int x = current[0], y = current[1], moves = current[2];

            if (x == goalX && y == goalY) return moves;

            // Explore in all 4 straight directions
            // Move Up
            for (int i = x - 1; i >= 0 && grid.get(i).charAt(y) != 'X'; i--) {
                if (!visited[i][y]) {
                    visited[i][y] = true;
                    queue.add(new int[]{i, y, moves + 1});
                }
            }
            // Move Down
            for (int i = x + 1; i < n && grid.get(i).charAt(y) != 'X'; i++) {
                if (!visited[i][y]) {
                    visited[i][y] = true;
                    queue.add(new int[]{i, y, moves + 1});
                }
            }
            // Move Left
            for (int j = y - 1; j >= 0 && grid.get(x).charAt(j) != 'X'; j--) {
                if (!visited[x][j]) {
                    visited[x][j] = true;
                    queue.add(new int[]{x, j, moves + 1});
                }
            }
            // Move Right
            for (int j = y + 1; j < n && grid.get(x).charAt(j) != 'X'; j++) {
                if (!visited[x][j]) {
                    visited[x][j] = true;
                    queue.add(new int[]{x, j, moves + 1});
                }
            }
        }

        return -1; // Goal unreachable
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = Integer.parseInt(scanner.nextLine().trim());
        List<String> grid = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            grid.add(scanner.nextLine().trim());
        }

        String[] parts = scanner.nextLine().split(" ");
        int startX = Integer.parseInt(parts[0]);
        int startY = Integer.parseInt(parts[1]);
        int goalX = Integer.parseInt(parts[2]);
        int goalY = Integer.parseInt(parts[3]);

        int result = minimumMoves(grid, startX, startY, goalX, goalY);
        System.out.println(result);
    }
}
