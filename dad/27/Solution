import java.util.*;

public class Solution {
    public static int twoStacks(int maxSum, List<Integer> a, List<Integer> b) {
        int count = 0, sum = 0;
        int i = 0, j = 0;

        // Take as many as possible from stack A
        while (i < a.size() && sum + a.get(i) <= maxSum) {
            sum += a.get(i);
            i++;
        }
        count = i;

        // Try replacing some from A with B
        while (j < b.size()) {
            sum += b.get(j);
            j++;

            while (sum > maxSum && i > 0) {
                i--;
                sum -= a.get(i);
            }

            if (sum > maxSum) break;

            count = Math.max(count, i + j);
        }

        return count;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int g = scanner.nextInt(); // number of games

        for (int game = 0; game < g; game++) {
            int n = scanner.nextInt(); // size of stack A
            int m = scanner.nextInt(); // size of stack B
            int maxSum = scanner.nextInt();

            List<Integer> a = new ArrayList<>();
            List<Integer> b = new ArrayList<>();

            for (int i = 0; i < n; i++) a.add(scanner.nextInt());
            for (int i = 0; i < m; i++) b.add(scanner.nextInt());

            int result = twoStacks(maxSum, a, b);
            System.out.println(result);
        }

        scanner.close();
    }
}
